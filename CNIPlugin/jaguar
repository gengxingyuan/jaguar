#! /usr/bin/python

import os
import shlex
import sys
import time
import json
import requests
import subprocess
import pyroute2
import ConfigParser
import socket
import struct
import random
from netaddr import *

CNI_VERSION = "0.3.1"

JAGUAR_IPAM_CONFIG_FILE = "/etc/jaguar/ip.conf"
BRIDGE_NAME = "br0"

def call_popen(cmd):
    child = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    output = child.communicate()
    if child.returncode:
        raise RuntimeError("Fatal error executing %s" % (cmd))
    if len(output) == 0 or output[0] is None:
        output = ""
    else:
        output = output[0].decode("utf8").strip()
    return output


def call_prog(prog, args_list):
    cmd = [prog, "--timeout=5", "-vconsole:off"] + args_list
    return call_popen(cmd)


def ovs_vsctl(*args):
    return call_prog("ovs-vsctl", list(args))


def ovs_ofctl(*args):
    return call_prog("ovs-ofctl", list(args))

def post(url, userId, password, data):
    if userId is None:
        userId = 'admin'

    if password is None:
        password = 'admin'

    #print("post request with url " + url)
    #print("post request with data " + data)
    headers = {}
    headers['Content-Type'] = 'application/json'
    session = requests.session()
    resp = session.post(url, data.encode('utf-8'), headers=headers, auth=(userId, password))

    # print(resp.raise_for_status())
    # print(resp.headers)
    if resp.status_code >= 500:
        print(resp.text)

    return resp

def get_cidr(controller_ip,controller_port,name):
    url = 'http://' + controller_ip +':' + str(controller_port) +'/restconf/operations/ipam:request-node-ip-block'
    data = json.dumps({"input": {"node-name": name}})
    resp = post(url,'admin','admin',data)

    if resp.status_code == 200 and resp.text:
        data = json.loads(resp.text)
        global_cidr = data['output']['global-cidr']
        local_cidr = data['output']['node-cidr']
        return global_cidr,local_cidr
    else:
        return None,None

def add_host_route(global_cidr, local_cidr):
    local_net = IPNetwork(local_cidr)
    ip_list = list(local_net)
    ip_n = filter(lambda ip:(not str(ip).endswith('.0') and not str(ip).endswith('.255')),ip_list)
    gateway_ip = str(ip_n[0])
    mask = int(local_cidr.split('/')[1])

    ipdb = pyroute2.IPDB(mode='explicit')
    try:
        with ipdb.interfaces[BRIDGE_NAME] as bridge_iface:
            bridge_iface.up()
            bridge_iface.add_ip(gateway_ip,mask)

        # Set global route
        ipdb.routes.add(dst=global_cidr, oif=ipdb.interfaces[BRIDGE_NAME].index).commit()
    except Exception as e:
        raise JAGUARCNIException(100, "add_host_route " + str(e))

def ensure_cidr_conf():
    global_cidr = None
    local_cidr = None
    try:
        if not os.path.exists("/etc/jaguar"):
            os.makedirs("/etc/jaguar")

        if not os.path.exists('/etc/jaguar/ip.conf'):
            f = open('/etc/jaguar/ip.conf','w')
            f.close()

        cf = ConfigParser.ConfigParser()
        cf.read(JAGUAR_IPAM_CONFIG_FILE)
        if not cf.has_section('global'):
            cf.add_section('global')
            cf.add_section('local')
            cf.set("global", "controller_ip", '192.168.139.10')
            cf.set("global", "controller_port", '8181')
            cf.write(open(JAGUAR_IPAM_CONFIG_FILE, "w"))
            global_cidr,local_cidr = get_cidr('192.168.139.10', 8181, socket.gethostname())
        else:
            if not cf.has_option('local','cidr'):
                controller_ip = cf.get("global", "controller_ip")
                controller_port = cf.getint("global", "controller_port")
                global_cidr,local_cidr = get_cidr(controller_ip, controller_port, socket.gethostname())

        if global_cidr and local_cidr:
            cf.set("global", "cidr", global_cidr)
            cf.set("local", "cidr", local_cidr)
            cf.write(open(JAGUAR_IPAM_CONFIG_FILE, "w"))
            add_host_route(global_cidr, local_cidr)
    except Exception as e:
        raise JAGUARCNIException(100, "failure ensure_cidr_conf " + str(e))


def allocate_ipaddr():
    ensure_cidr_conf()
    allocated_ip = '127.0.0.1'
    gateway_ip = '0.0.0.0'

    cf = ConfigParser.ConfigParser()
    cf.read(JAGUAR_IPAM_CONFIG_FILE)

    if not cf.has_option('local','cidr'):
        return allocated_ip,gateway_ip,'0.0.0.0/0','0.0.0.0/0'
    global_cidr = cf.get("global", "cidr")
    local_cidr = cf.get("local", "cidr")

    local_net = IPNetwork(local_cidr)

    ip_list = list(local_net)
    ip_int_all = []
    ip_n = filter(lambda ip:(not str(ip).endswith('.0') and not str(ip).endswith('.255')),ip_list)
    for item in ip_n:
        ip_int_all.append(socket.ntohl(struct.unpack("I",socket.inet_aton(str(item)))[0]))
    ip_int_all.sort()

    if not cf.has_option('local','ips'):
        gateway_ip = socket.inet_ntoa(struct.pack('I',socket.htonl(ip_int_all[0])))
        allocated_ip = socket.inet_ntoa(struct.pack('I',socket.htonl(ip_int_all[1])))
        ips_str = gateway_ip + ',' + allocated_ip
        #print(ips_str)
    else:
        ips_str = cf.get('local','ips')
        ipstr_assigned = ips_str.split(',')
        ip_int_assigned = []
        for tmp_assigned_ip in ipstr_assigned:
            ip_int_assigned.append(socket.ntohl(struct.unpack("I",socket.inet_aton(str(tmp_assigned_ip)))[0]))

        gateway_ip = socket.inet_ntoa(struct.pack('I',socket.htonl(ip_int_all[0])))
        ip_int_to_be_assigned = list(set(ip_int_all)^set(ip_int_assigned)) # list(set(a).difference(set(b)))
        ip_int_to_be_assigned.sort()
        allocated_ip = socket.inet_ntoa(struct.pack('I',socket.htonl(ip_int_to_be_assigned[0])))
        ips_str = ips_str + ',' + allocated_ip

    cf.set("local", "ips", ips_str)

    cf.write(open(JAGUAR_IPAM_CONFIG_FILE, "w"))

    return allocated_ip,gateway_ip,local_cidr,global_cidr


def release_ip(ip):
    ensure_cidr_conf()

    cf = ConfigParser.ConfigParser()
    cf.read(JAGUAR_IPAM_CONFIG_FILE)

    if cf.has_option('local','ips'):
        ips_str = cf.get("local", "ips")
        ips_str = ips_str.replace(','+ip,'')
        cf.set("local", "ips",ips_str)
        cf.write(open(JAGUAR_IPAM_CONFIG_FILE, "w"))

class JAGUARCNIException(Exception):

    def __init__(self, code, message, details=None):
        super(JAGUARCNIException, self).__init__("%s - %s" % (code, message))
        self._code = code
        self._msg = message
        self._details = details

    def cni_error(self):
        error_data = {'cniVersion': CNI_VERSION,
                      'code': self._code,
                      'message': self._msg}
        if self._details:
            error_data['details'] = self._details
        return json.dumps(error_data)


def setup_interface(container_id, cni_netns, cni_ifname,
                    mac_address, ip_address, mask, gateway_ip):
    try:
        if not os.path.exists("/var/run/netns"):
            os.makedirs("/var/run/netns")
    except Exception as e:
        raise JAGUARCNIException(100, "failure in creation of netns directory")

    try:
        ipdb = pyroute2.IPDB(mode='explicit')
        veth_outside = container_id[:15]
        veth_inside = container_id[:13] + "_c"
        ipdb.create(ifname=veth_outside, kind='veth', peer=veth_inside)
        with ipdb.interfaces[veth_outside] as veth_outside_iface:
            # Up the outer interface
            veth_outside_iface.up()
            veth_outside_idx = veth_outside_iface.index

        # Create a link for the container namespace
        # This is necessary also when using pyroute2
        # See https://github.com/svinota/pyroute2/issues/290
        netns_dst = "/var/run/netns/%s" % container_id
        if not os.path.isfile(netns_dst):
            command = "ln -s %s %s" % (cni_netns, netns_dst)
            call_popen(shlex.split(command))

        with ipdb.interfaces[veth_inside] as veth_inside_iface:
            # Move the inner veth inside the container namespace
            veth_inside_iface.net_ns_fd = container_id

    except Exception as e:
        raise JAGUARCNIException(100, "veth pair setup failure" + str(e))

    try:
        # Change the name of veth_inside to $cni_ifname
        ns_ipdb = pyroute2.IPDB(nl=pyroute2.NetNS(container_id),
                                mode='explicit')
        # Configure veth_inside: set name, mtu, mac address, ip, and bring up
        with ns_ipdb.interfaces[veth_inside] as veth_inside_iface:
            veth_inside_iface.ifname = cni_ifname
            veth_inside_iface.address = mac_address
            veth_inside_iface.mtu = 1400
            veth_inside_iface.add_ip(ip_address,mask)
            veth_inside_iface.up()

        # Set the gateway ,     oif = ns_ipdb.interfaces[veth_inside].index
        ns_ipdb.routes.add(dst='default', oif=ns_ipdb.interfaces[cni_ifname]['index']).commit()

        return veth_outside
    except Exception as e:
        if veth_outside_idx:
            pyroute2.IPRoute().link('del', index=veth_outside_idx)
        raise JAGUARCNIException(100, "container interface setup failure" + str(e))


def randomMAC():
    mac = [ 0x52, 0x54, 0x00,
            random.randint(0x00, 0x7f),
            random.randint(0x00, 0xff),
            random.randint(0x00, 0xff) ]
    return ':'.join(map(lambda x: "%02x" % x, mac))

def cni_add(cni_ifname, cni_netns, namespace, pod_name, container_id):

    ip_address,gateway_ip,local_cidr,global_cidr = allocate_ipaddr()
    mask = int(local_cidr.split('/')[1])
    mac_address = randomMAC()

    veth_outside = setup_interface(container_id, cni_netns, cni_ifname,
                                   mac_address, ip_address, mask,
                                   gateway_ip)

    iface_id = "%s_%s" % (namespace, pod_name)

    try:
        ovs_vsctl('add-port', BRIDGE_NAME, veth_outside, '--', 'set',
                  'interface', veth_outside,
                  'external_ids:attached_mac=%s' % mac_address,
                  'external_ids:iface-id=%s' % iface_id,
                  'external_ids:ip_address=%s' % ip_address)
    except Exception as e:
        raise JAGUARCNIException(106, "failure in plugging pod interface" + str(e))

    output = json.dumps({'ip_address': ip_address,
                        'gateway_ip': gateway_ip, 'mac_address': mac_address})
    print(output)

def cni_del(container_id, cni_ifname):
    try:
        ovs_vsctl("del-port", container_id[:15])
    except Exception:
        message = "failed to delete OVS port %s" % container_id[:15]
        print(message)
    ip_address = '127.0.0.1'
    ns_ipdb = pyroute2.IPDB(nl=pyroute2.NetNS(container_id),
                            mode='explicit')
    with ns_ipdb.interfaces[cni_ifname] as inside_iface:
        ip_address = inside_iface.ipaddr[1][0]
    ns_ipdb.release()
    release_ip(ip_address)

    command = "rm -f /var/run/netns/%s" % container_id
    call_popen(shlex.split(command))

def main():
    try:
        cni_command = os.environ['CNI_COMMAND']
        cni_ifname = os.environ['CNI_IFNAME']
        cni_netns = os.environ['CNI_NETNS']
        cni_args = os.environ['CNI_ARGS']

        cni_args_dict = dict(i.split("=") for i in cni_args.split(";"))
        namespace = cni_args_dict['K8S_POD_NAMESPACE']
        pod_name = cni_args_dict['K8S_POD_NAME']
        container_id = cni_args_dict['K8S_POD_INFRA_CONTAINER_ID']
    except Exception as e:
        raise JAGUARCNIException(100, 'required CNI variables missing', str(e))

    if cni_command == "ADD":
        cni_add(cni_ifname, cni_netns, namespace, pod_name, container_id)
    elif cni_command == "DEL":
        cni_del(container_id, cni_ifname)

if __name__ == '__main__':
    try:
        main()
    except JAGUARCNIException as e:
        print(e.cni_error())
        sys.exit(1)
    except Exception as e:
        error = {'cniVersion': CNI_VERSION, 'code': 100,
                 'message': str(e)}
        print(json.dumps(error))
        sys.exit(1)
